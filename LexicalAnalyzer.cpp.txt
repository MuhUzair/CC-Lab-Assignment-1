#include <iostream>
#include <string>
#include <cctype>

using namespace std;

void identifyToken(const string& token);
bool isKeyword(const string& token);
bool isDataType(const string& token);
bool isSpecialChar(char c);
bool isNumber(const string& token);
bool isOperator(const string& token);
void identifySpecificOperator(const string& token); // Function for specific operator identification

int main() {
    string inputCode;
    string token;

    cout << "Enter the C++ code:\n";
    getline(cin, inputCode);

    for (char c : inputCode) {
        if (isalnum(c) || c == '_' || c == '.') { // '.' for floating point numbers
            token += c;
        } else {
            if (!token.empty()) {
                identifyToken(token);
                token.clear(); // Reset token
            }
            if (isSpecialChar(c) || isOperator(string(1, c))) {
                string specialToken(1, c);
                identifyToken(specialToken);
            }
        }
    }

    if (!token.empty()) {
        identifyToken(token);
    }

    cout << "Lexical analysis completed.\n";

    return 0;
}

void identifyToken(const string& token) {
    if (isNumber(token)) {
        cout << token << " is a number.\n";
    } else if (isOperator(token)) {
        identifySpecificOperator(token); // Use the new function for specific operator identification
    } else if (isSpecialChar(token[0]) && token.size() == 1) {
        cout << token << " is a special character.\n";
    } else if (isKeyword(token)) {
        cout << token << " is a keyword.\n";
    } else if (isDataType(token)) {
        cout << token << " is a data type.\n";
    } else {
        cout << token << " is an identifier.\n";
    }
}

void identifySpecificOperator(const string& token) {
    if (token == "+" || token == "-" || token == "*" || token == "/" || token == "%") {
        cout << token << " is an arithmetic operator.\n";
    } else if (token == "=") {
        cout << token << " is an assignment operator.\n";
    } else {
        cout << token << " is an operator.\n";
    }
}

bool isKeyword(const string& token) {
    static const string keywords[] = {"for", "while", "do", "int", "float", "char", "double", "static", "switch", "case"};
    for (const string& keyword : keywords) {
        if (token == keyword) {
            return true;
        }
    }
    return false;
}

bool isDataType(const string& token) {
    static const string dataTypes[] = {"int", "float", "char"};
    for (const string& dataType : dataTypes) {
        if (token == dataType) {
            return true;
        }
    }
    return false;
}

bool isSpecialChar(char c) {
    return (c == '(' || c == ')' || c == '{' || c == '}' || c == '[' || c == ']' || c == ';' || c == ',');
}

bool isNumber(const string& token) {
    bool dotEncountered = false;
    for (char c : token) {
        if (!isdigit(c)) {
            if (c == '.' && !dotEncountered) {
                dotEncountered = true;
                continue;
            }
            return false;
        }
    }
    return true;
}

bool isOperator(const string& token) {
    static const string operators[] = {"+", "-", "*", "/", "=", "<", ">", "++", "--", "==", "!=", "<=", ">="};
    for (const string& op : operators) {
        if (token == op) {
            return true;
        }
    }
    return false;
}
